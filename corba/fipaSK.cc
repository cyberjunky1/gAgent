// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "fipa.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
FIPA::Property::operator>>= (cdrStream &_n) const
{
  _n.marshalString(keyword,0);
  (const ::CORBA::Any&) value >>= _n;

}

void
FIPA::Property::operator<<= (cdrStream &_n)
{
  keyword = _n.unmarshalString(0);
  (::CORBA::Any&)value <<= _n;

}

void
FIPA::AgentID::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  (const _CORBA_Unbounded_Sequence_String&) addresses >>= _n;
  (const _CORBA_Unbounded_Sequence< AgentID > &) resolvers >>= _n;
  (const _CORBA_Unbounded_Sequence< Property > &) userDefinedProperties >>= _n;

}

void
FIPA::AgentID::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (_CORBA_Unbounded_Sequence_String&)addresses <<= _n;
  (_CORBA_Unbounded_Sequence< AgentID > &)resolvers <<= _n;
  (_CORBA_Unbounded_Sequence< Property > &)userDefinedProperties <<= _n;

}

void
FIPA::DateTime::operator>>= (cdrStream &_n) const
{
  year >>= _n;
  month >>= _n;
  day >>= _n;
  hour >>= _n;
  minutes >>= _n;
  seconds >>= _n;
  milliseconds >>= _n;
  _n.marshalChar(typeDesignator);

}

void
FIPA::DateTime::operator<<= (cdrStream &_n)
{
  (::CORBA::Short&)year <<= _n;
  (::CORBA::Short&)month <<= _n;
  (::CORBA::Short&)day <<= _n;
  (::CORBA::Short&)hour <<= _n;
  (::CORBA::Short&)minutes <<= _n;
  (::CORBA::Short&)seconds <<= _n;
  (::CORBA::Short&)milliseconds <<= _n;
  typeDesignator = _n.unmarshalChar();

}

void
FIPA::ReceivedObject::operator>>= (cdrStream &_n) const
{
  _n.marshalString(by,0);
  _n.marshalString(from,0);
  (const DateTime&) date >>= _n;
  _n.marshalString(id,0);
  _n.marshalString(via,0);

}

void
FIPA::ReceivedObject::operator<<= (cdrStream &_n)
{
  by = _n.unmarshalString(0);
  from = _n.unmarshalString(0);
  (DateTime&)date <<= _n;
  id = _n.unmarshalString(0);
  via = _n.unmarshalString(0);

}

void
FIPA::Envelope::operator>>= (cdrStream &_n) const
{
  (const AgentIDs&) to >>= _n;
  (const OptAgentID&) from >>= _n;
  _n.marshalString(comments,0);
  _n.marshalString(aclRepresentation,0);
  payloadLength >>= _n;
  _n.marshalString(payloadEncoding,0);
  (const OptDateTime&) date >>= _n;
  (const strings&) encrypted >>= _n;
  (const AgentIDs&) intendedReceiver >>= _n;
  (const OptReceivedObject&) received >>= _n;
  (const OptTransportBehaviourType&) transportBehaviour >>= _n;
  (const _CORBA_Unbounded_Sequence< Property > &) userDefinedProperties >>= _n;

}

void
FIPA::Envelope::operator<<= (cdrStream &_n)
{
  (AgentIDs&)to <<= _n;
  (OptAgentID&)from <<= _n;
  comments = _n.unmarshalString(0);
  aclRepresentation = _n.unmarshalString(0);
  (::CORBA::Long&)payloadLength <<= _n;
  payloadEncoding = _n.unmarshalString(0);
  (OptDateTime&)date <<= _n;
  (strings&)encrypted <<= _n;
  (AgentIDs&)intendedReceiver <<= _n;
  (OptReceivedObject&)received <<= _n;
  (OptTransportBehaviourType&)transportBehaviour <<= _n;
  (_CORBA_Unbounded_Sequence< Property > &)userDefinedProperties <<= _n;

}

void
FIPA::FipaMessage::operator>>= (cdrStream &_n) const
{
  (const Envelopes&) messageEnvelopes >>= _n;
  (const Payload&) messageBody >>= _n;

}

void
FIPA::FipaMessage::operator<<= (cdrStream &_n)
{
  (Envelopes&)messageEnvelopes <<= _n;
  (Payload&)messageBody <<= _n;

}

FIPA::MTS_ptr FIPA::MTS_Helper::_nil() {
  return ::FIPA::MTS::_nil();
}

::CORBA::Boolean FIPA::MTS_Helper::is_nil(::FIPA::MTS_ptr p) {
  return ::CORBA::is_nil(p);

}

void FIPA::MTS_Helper::release(::FIPA::MTS_ptr p) {
  ::CORBA::release(p);
}

void FIPA::MTS_Helper::marshalObjRef(::FIPA::MTS_ptr obj, cdrStream& s) {
  ::FIPA::MTS::_marshalObjRef(obj, s);
}

FIPA::MTS_ptr FIPA::MTS_Helper::unmarshalObjRef(cdrStream& s) {
  return ::FIPA::MTS::_unmarshalObjRef(s);
}

void FIPA::MTS_Helper::duplicate(::FIPA::MTS_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

FIPA::MTS_ptr
FIPA::MTS::_duplicate(::FIPA::MTS_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

FIPA::MTS_ptr
FIPA::MTS::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


FIPA::MTS_ptr
FIPA::MTS::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

FIPA::MTS_ptr
FIPA::MTS::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_MTS _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_MTS* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_MTS;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* FIPA::MTS::_PD_repoId = "IDL:FIPA/MTS:1.0";


FIPA::_objref_MTS::~_objref_MTS() {
  
}


FIPA::_objref_MTS::_objref_MTS(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::FIPA::MTS::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
FIPA::_objref_MTS::_ptrToObjRef(const char* id)
{
  if( id == ::FIPA::MTS::_PD_repoId )
    return (::FIPA::MTS_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::FIPA::MTS::_PD_repoId) )
    return (::FIPA::MTS_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _wvoid_i_cFIPA_mFipaMessage
class _0RL_cd_926129cfcc6c1a0c_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_926129cfcc6c1a0c_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 1, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  FIPA::FipaMessage_var arg_0_;
  const FIPA::FipaMessage* arg_0;
};

void _0RL_cd_926129cfcc6c1a0c_00000000::marshalArguments(cdrStream& _n)
{
  (const FIPA::FipaMessage&) *arg_0 >>= _n;

}

void _0RL_cd_926129cfcc6c1a0c_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new FIPA::FipaMessage;
  (FIPA::FipaMessage&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_926129cfcc6c1a0c_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_926129cfcc6c1a0c_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_926129cfcc6c1a0c_00000000* tcd = (_0RL_cd_926129cfcc6c1a0c_00000000*)cd;
  FIPA::_impl_MTS* impl = (FIPA::_impl_MTS*) svnt->_ptrToInterface(FIPA::MTS::_PD_repoId);
  impl->message(*tcd->arg_0);


}

void FIPA::_objref_MTS::message(const ::FIPA::FipaMessage& aFipaMessage)
{
  _0RL_cd_926129cfcc6c1a0c_00000000 _call_desc(_0RL_lcfn_926129cfcc6c1a0c_10000000, "message", 8);
  _call_desc.arg_0 = &(::FIPA::FipaMessage&) aFipaMessage;

  _invoke(_call_desc);



}
FIPA::_pof_MTS::~_pof_MTS() {}


omniObjRef*
FIPA::_pof_MTS::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::FIPA::_objref_MTS(ior, id);
}


::CORBA::Boolean
FIPA::_pof_MTS::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::FIPA::MTS::_PD_repoId) )
    return 1;
  
  return 0;
}

const FIPA::_pof_MTS _the_pof_FIPA_mMTS;

FIPA::_impl_MTS::~_impl_MTS() {}


::CORBA::Boolean
FIPA::_impl_MTS::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "message") ) {

    _0RL_cd_926129cfcc6c1a0c_00000000 _call_desc(_0RL_lcfn_926129cfcc6c1a0c_10000000, "message", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
FIPA::_impl_MTS::_ptrToInterface(const char* id)
{
  if( id == ::FIPA::MTS::_PD_repoId )
    return (::FIPA::_impl_MTS*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::FIPA::MTS::_PD_repoId) )
    return (::FIPA::_impl_MTS*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
FIPA::_impl_MTS::_mostDerivedRepoId()
{
  return ::FIPA::MTS::_PD_repoId;
}

POA_FIPA::MTS::~MTS() {}

